#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("@aws-cdk/core");
const { SSMClient, GetParameterCommand } = require('@aws-sdk/client-ssm');
const ssmClient = new SSMClient();
const cdk_backend_stack_1 = require("../lib/cdk-backend-stack");
const cdk_frontend_stack_1 = require("../lib/cdk-frontend-stack");
const cdk_pipeline_stack_1 = require("../lib/pipeline/cdk-pipeline-stack");
const cdk_chime_event_bridge_stack_1 = require("../lib/recording/cdk-chime-event-bridge-stack");
const configParams = require('../config.params.json');
const app = new cdk.App();
const deployWithPipeline = () => {
    console.log("Running in pipeline mode...");
    const cdkPipelineStack = new cdk_pipeline_stack_1.CdkPipelineStack(app, configParams['CdkPipelineStack'], {
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION }
    });
};
const deployWithoutPipeline = () => {
    console.log("Running in stack mode...");
    const cdkBackendStack = new cdk_backend_stack_1.CdkBackendStack(app, configParams['CdkBackendStack'], {
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION }
    });
    const cdkFrontendStack = new cdk_frontend_stack_1.CdkFrontendStack(app, configParams['CdkFrontendStack'], {
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
        webAppBucket: cdkBackendStack.webAppBucket,
        webAppCloudFrontOAI: cdkBackendStack.webAppCloudFrontOAI
    });
    cdkFrontendStack.addDependency(cdkBackendStack);
    isDeployRecordingStack().then((isDeployRecordingStack) => {
        if (isDeployRecordingStack) {
            const cdkChimeEventBridgeStack = new cdk_chime_event_bridge_stack_1.CdkChimeEventBridgeStack(app, configParams['CdkChimeEventBridgeStack'], {
                env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: 'us-east-1' },
                cdkBackendStackRegion: cdkBackendStack.region,
                appTable: cdkBackendStack.appTable,
                recordingECSClusterARN: cdkBackendStack.recordingECSClusterARN,
                recordingECSClusterName: cdkBackendStack.recordingECSClusterName
            });
            cdkChimeEventBridgeStack.addDependency(cdkBackendStack);
        }
    });
};
const isCdkPipelineEnabled = async () => {
    const cdkPipelineEnabled = await ssmClient.send(new GetParameterCommand({ Name: `${configParams.hierarchy}cdkPipelineEnabled` })).catch((error) => {
        console.error(error);
        throw new Error(`Error loading SSM Parameter: [cdkPipelineEnabled]`);
    });
    return cdkPipelineEnabled.Parameter.Value.toLowerCase() === "true";
};
const isDeployRecordingStack = async () => {
    const deployRecordingStack = await ssmClient.send(new GetParameterCommand({ Name: `${configParams.hierarchy}deployRecordingStack` })).catch((error) => {
        console.error(error);
        throw new Error(`Error loading SSM Parameter: [deployRecordingStack]`);
    });
    return deployRecordingStack.Parameter.Value.toLowerCase() === "true";
};
isCdkPipelineEnabled().then((cdkPipelineEnabled) => {
    if (cdkPipelineEnabled)
        deployWithPipeline();
    else
        deployWithoutPipeline();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLXN0YWNrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNkay1zdGFja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQyxNQUFNLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFFLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUE7QUFDekUsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQTtBQUNqQyxnRUFBMkQ7QUFDM0Qsa0VBQTZEO0FBQzdELDJFQUFzRTtBQUN0RSxnR0FBeUY7QUFFekYsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFdEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUU7SUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxxQ0FBZ0IsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7UUFDakYsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUU7S0FDNUYsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFBO0FBRUQsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLEVBQUU7SUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sZUFBZSxHQUFHLElBQUksbUNBQWUsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7UUFDOUUsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxF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b3J0L3JlZ2lzdGVyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmNvbnN0IHsgU1NNQ2xpZW50LCBHZXRQYXJhbWV0ZXJDb21tYW5kIH0gPSByZXF1aXJlKCdAYXdzLXNkay9jbGllbnQtc3NtJylcbmNvbnN0IHNzbUNsaWVudCA9IG5ldyBTU01DbGllbnQoKVxuaW1wb3J0IHsgQ2RrQmFja2VuZFN0YWNrIH0gZnJvbSAnLi4vbGliL2Nkay1iYWNrZW5kLXN0YWNrJztcbmltcG9ydCB7IENka0Zyb250ZW5kU3RhY2sgfSBmcm9tICcuLi9saWIvY2RrLWZyb250ZW5kLXN0YWNrJztcbmltcG9ydCB7IENka1BpcGVsaW5lU3RhY2sgfSBmcm9tICcuLi9saWIvcGlwZWxpbmUvY2RrLXBpcGVsaW5lLXN0YWNrJztcbmltcG9ydCB7IENka0NoaW1lRXZlbnRCcmlkZ2VTdGFjayB9IGZyb20gJy4uL2xpYi9yZWNvcmRpbmcvY2RrLWNoaW1lLWV2ZW50LWJyaWRnZS1zdGFjayc7XG5cbmNvbnN0IGNvbmZpZ1BhcmFtcyA9IHJlcXVpcmUoJy4uL2NvbmZpZy5wYXJhbXMuanNvbicpO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBkZXBsb3lXaXRoUGlwZWxpbmUgPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJSdW5uaW5nIGluIHBpcGVsaW5lIG1vZGUuLi5cIik7XG4gICAgY29uc3QgY2RrUGlwZWxpbmVTdGFjayA9IG5ldyBDZGtQaXBlbGluZVN0YWNrKGFwcCwgY29uZmlnUGFyYW1zWydDZGtQaXBlbGluZVN0YWNrJ10sIHtcbiAgICAgICAgZW52OiB7IGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIH1cbiAgICB9KTtcbn1cblxuY29uc3QgZGVwbG95V2l0aG91dFBpcGVsaW5lID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiUnVubmluZyBpbiBzdGFjayBtb2RlLi4uXCIpO1xuICAgIGNvbnN0IGNka0JhY2tlbmRTdGFjayA9IG5ldyBDZGtCYWNrZW5kU3RhY2soYXBwLCBjb25maWdQYXJhbXNbJ0Nka0JhY2tlbmRTdGFjayddLCB7XG4gICAgICAgIGVudjogeyBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULCByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBjZGtGcm9udGVuZFN0YWNrID0gbmV3IENka0Zyb250ZW5kU3RhY2soYXBwLCBjb25maWdQYXJhbXNbJ0Nka0Zyb250ZW5kU3RhY2snXSwge1xuICAgICAgICBlbnY6IHsgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCwgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04gfSxcbiAgICAgICAgd2ViQXBwQnVja2V0OiBjZGtCYWNrZW5kU3RhY2sud2ViQXBwQnVja2V0LFxuICAgICAgICB3ZWJBcHBDbG91ZEZyb250T0FJOiBjZGtCYWNrZW5kU3RhY2sud2ViQXBwQ2xvdWRGcm9udE9BSVxuICAgIH0pO1xuICAgIGNka0Zyb250ZW5kU3RhY2suYWRkRGVwZW5kZW5jeShjZGtCYWNrZW5kU3RhY2spO1xuXG4gICAgaXNEZXBsb3lSZWNvcmRpbmdTdGFjaygpLnRoZW4oKGlzRGVwbG95UmVjb3JkaW5nU3RhY2spID0+IHtcbiAgICAgICAgaWYgKGlzRGVwbG95UmVjb3JkaW5nU3RhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGNka0NoaW1lRXZlbnRCcmlkZ2VTdGFjayA9IG5ldyBDZGtDaGltZUV2ZW50QnJpZGdlU3RhY2soYXBwLCBjb25maWdQYXJhbXNbJ0Nka0NoaW1lRXZlbnRCcmlkZ2VTdGFjayddLCB7XG4gICAgICAgICAgICAgICAgZW52OiB7IGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfSxcbiAgICAgICAgICAgICAgICBjZGtCYWNrZW5kU3RhY2tSZWdpb246IGNka0JhY2tlbmRTdGFjay5yZWdpb24sXG4gICAgICAgICAgICAgICAgYXBwVGFibGU6IGNka0JhY2tlbmRTdGFjay5hcHBUYWJsZSxcbiAgICAgICAgICAgICAgICByZWNvcmRpbmdFQ1NDbHVzdGVyQVJOOiBjZGtCYWNrZW5kU3RhY2sucmVjb3JkaW5nRUNTQ2x1c3RlckFSTixcbiAgICAgICAgICAgICAgICByZWNvcmRpbmdFQ1NDbHVzdGVyTmFtZTogY2RrQmFja2VuZFN0YWNrLnJlY29yZGluZ0VDU0NsdXN0ZXJOYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNka0NoaW1lRXZlbnRCcmlkZ2VTdGFjay5hZGREZXBlbmRlbmN5KGNka0JhY2tlbmRTdGFjayk7XG4gICAgICAgIH1cbiAgICB9KTtcblxufVxuXG5jb25zdCBpc0Nka1BpcGVsaW5lRW5hYmxlZCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjZGtQaXBlbGluZUVuYWJsZWQgPSBhd2FpdCBzc21DbGllbnQuc2VuZChuZXcgR2V0UGFyYW1ldGVyQ29tbWFuZCh7IE5hbWU6IGAke2NvbmZpZ1BhcmFtcy5oaWVyYXJjaHl9Y2RrUGlwZWxpbmVFbmFibGVkYCB9KSkuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBsb2FkaW5nIFNTTSBQYXJhbWV0ZXI6IFtjZGtQaXBlbGluZUVuYWJsZWRdYCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNka1BpcGVsaW5lRW5hYmxlZC5QYXJhbWV0ZXIuVmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCI7XG59XG5cbmNvbnN0IGlzRGVwbG95UmVjb3JkaW5nU3RhY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGVwbG95UmVjb3JkaW5nU3RhY2sgPSBhd2FpdCBzc21DbGllbnQuc2VuZChuZXcgR2V0UGFyYW1ldGVyQ29tbWFuZCh7IE5hbWU6IGAke2NvbmZpZ1BhcmFtcy5oaWVyYXJjaHl9ZGVwbG95UmVjb3JkaW5nU3RhY2tgIH0pKS5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGxvYWRpbmcgU1NNIFBhcmFtZXRlcjogW2RlcGxveVJlY29yZGluZ1N0YWNrXWApO1xuICAgIH0pO1xuICAgIHJldHVybiBkZXBsb3lSZWNvcmRpbmdTdGFjay5QYXJhbWV0ZXIuVmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCI7XG59XG5cblxuaXNDZGtQaXBlbGluZUVuYWJsZWQoKS50aGVuKChjZGtQaXBlbGluZUVuYWJsZWQpID0+IHtcbiAgICBpZiAoY2RrUGlwZWxpbmVFbmFibGVkKSBkZXBsb3lXaXRoUGlwZWxpbmUoKTtcbiAgICBlbHNlIGRlcGxveVdpdGhvdXRQaXBlbGluZSgpO1xufSk7XG5cbiJdfQ==