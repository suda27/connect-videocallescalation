"use strict";
// Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordingAPIStack = void 0;
const cdk = require("@aws-cdk/core");
const nodeLambda = require("@aws-cdk/aws-lambda-nodejs");
const lambda = require("@aws-cdk/aws-lambda");
const apigw = require("@aws-cdk/aws-apigateway");
const apigw2 = require("@aws-cdk/aws-apigatewayv2");
const apigw2i = require("@aws-cdk/aws-apigatewayv2-integrations");
const iam = require("@aws-cdk/aws-iam");
class RecordingAPIStack extends cdk.NestedStack {
    constructor(scope, id, props) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(scope, id, props);
        //create startRecording Lambda
        const startRecordingLambda = new nodeLambda.NodejsFunction(this, 'StartRecordingLambda', {
            functionName: `${props.cdkAppName}-StartRecordingLambda`,
            runtime: lambda.Runtime.NODEJS_12_X,
            entry: 'lambdas/handlers/RecordingAPI/startRecording.js',
            timeout: cdk.Duration.seconds(20),
            environment: {
                DDB_TABLE: props.appTable.tableName,
                ECS_CLUSTER_ARN: props.recordingECSClusterARN,
                ECS_CONTAINER_NAME: props.recordingContainerName,
                ECS_TASK_DEFINITION_ARN: props.recordingTaskDefinitionARN,
                RECORDING_BUCKET_NAME: props.recordingBucketName,
                RECORDING_SCREEN_WIDTH: "1920",
                RECORDING_SCREEN_HEIGHT: "1080",
                RECORDING_ATTENDEE_NAME: props.SSMParams.recordingAttendeeName,
                ConnectInstanceId: props.SSMParams.connectInstanceARN.split('/')[1]
            }
        });
        props.appTable.grantReadWriteData(startRecordingLambda);
        (_a = startRecordingLambda.role) === null || _a === void 0 ? void 0 : _a.attachInlinePolicy(new iam.Policy(this, 'ChimeCreateAttendeeAccess', {
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ['chime:CreateAttendee'],
                    resources: ['*']
                })
            ]
        }));
        (_b = startRecordingLambda.role) === null || _b === void 0 ? void 0 : _b.attachInlinePolicy(new iam.Policy(this, 'ECSRunTaskAccess', {
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ['ecs:RunTask'],
                    resources: [props.recordingTaskDefinitionARN]
                })
            ]
        }));
        (_c = startRecordingLambda.role) === null || _c === void 0 ? void 0 : _c.attachInlinePolicy(new iam.Policy(this, 'IAMPassRoleAccess', {
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ['iam:PassRole'],
                    resources: [props.recordingTaskDefinitionExecutionRoleARN]
                })
            ]
        }));
        (_d = startRecordingLambda.role) === null || _d === void 0 ? void 0 : _d.attachInlinePolicy(new iam.Policy(this, 'ConnectUpdateContactAttributesAccess', {
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ['connect:UpdateContactAttributes'],
                    resources: [`${props.SSMParams.connectInstanceARN}/contact/*`]
                })
            ]
        }));
        //create stopRecording Lambda
        const stopRecordingLambda = new nodeLambda.NodejsFunction(this, 'StopRecordingLambda', {
            functionName: `${props.cdkAppName}-StopRecordingLambda`,
            runtime: lambda.Runtime.NODEJS_12_X,
            entry: 'lambdas/handlers/RecordingAPI/stopRecording.js',
            timeout: cdk.Duration.seconds(20),
            environment: {
                DDB_TABLE: props.appTable.tableName,
                ECS_CLUSTER_ARN: props.recordingECSClusterARN,
            }
        });
        props.appTable.grantReadWriteData(stopRecordingLambda);
        (_e = stopRecordingLambda.role) === null || _e === void 0 ? void 0 : _e.attachInlinePolicy(new iam.Policy(this, 'ECSStopTaskAccess', {
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ['ecs:StopTask'],
                    resources: [`arn:aws:ecs:${this.region}:${this.account}:task/${props.recordingECSClusterName}/*`]
                })
            ]
        }));
        (_f = stopRecordingLambda.role) === null || _f === void 0 ? void 0 : _f.attachInlinePolicy(new iam.Policy(this, 'ChimeDeleteAttendeeAccess', {
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ['chime:DeleteAttendee'],
                    resources: ['*']
                })
            ]
        }));
        //create getRecordingSummary Lambda
        const getRecordingSummaryLambda = new nodeLambda.NodejsFunction(this, 'GetRecordingSummaryLambda', {
            functionName: `${props.cdkAppName}-GetRecordingSummaryLambda`,
            runtime: lambda.Runtime.NODEJS_12_X,
            entry: 'lambdas/handlers/RecordingAPI/getRecordingSummary.js',
            timeout: cdk.Duration.seconds(20),
            environment: {
                DDB_TABLE: props.appTable.tableName,
                recordingPlaybackSecurityProfileId: props.SSMParams.recordingPlaybackSecurityProfileId,
                recordingPresignedURLExpiresMinutes: props.SSMParams.recordingPresignedURLExpiresMinutes
            }
        });
        props.appTable.grantReadData(getRecordingSummaryLambda);
        (_g = getRecordingSummaryLambda.role) === null || _g === void 0 ? void 0 : _g.attachInlinePolicy(new iam.Policy(this, 'S3PreSignedAccess', {
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ['S3:GetObject'],
                    resources: [`arn:aws:s3:::${props.recordingBucketName}/RECORDINGS/*`]
                })
            ]
        }));
        const recordingAPI = new apigw2.HttpApi(this, 'RecordingAPI', {
            apiName: `${props.cdkAppName}-RecordingAPI`,
            corsPreflight: {
                allowOrigins: props.SSMParams.agentAPIAllowedOrigins.split(',').map((item) => item.trim()),
                allowMethods: [apigw2.CorsHttpMethod.GET, apigw2.CorsHttpMethod.POST, apigw2.CorsHttpMethod.DELETE],
                allowHeaders: apigw.Cors.DEFAULT_HEADERS.concat(['cognitoIdToken'])
            }
        });
        const startRecording_Route = new apigw2.HttpRoute(this, 'StartRecording_Route', {
            httpApi: recordingAPI,
            integration: new apigw2i.LambdaProxyIntegration({ handler: startRecordingLambda }),
            routeKey: apigw2.HttpRouteKey.with('/recording', apigw2.HttpMethod.POST)
        });
        const startRecording_RouteCfn = startRecording_Route.node.defaultChild;
        startRecording_RouteCfn.authorizationType = 'AWS_IAM';
        const stopRecording_Route = new apigw2.HttpRoute(this, 'StopRecording_Route', {
            httpApi: recordingAPI,
            integration: new apigw2i.LambdaProxyIntegration({ handler: stopRecordingLambda }),
            routeKey: apigw2.HttpRouteKey.with('/recording', apigw2.HttpMethod.DELETE)
        });
        const stopRecording_RouteCfn = stopRecording_Route.node.defaultChild;
        stopRecording_RouteCfn.authorizationType = 'AWS_IAM';
        const getRecordingSummary_Route = new apigw2.HttpRoute(this, 'GetRecordingSummary_Route', {
            httpApi: recordingAPI,
            integration: new apigw2i.LambdaProxyIntegration({ handler: getRecordingSummaryLambda }),
            routeKey: apigw2.HttpRouteKey.with('/recording-summary', apigw2.HttpMethod.GET)
        });
        const getRecordingSummary_RouteCfn = getRecordingSummary_Route.node.defaultChild;
        getRecordingSummary_RouteCfn.authorizationType = 'AWS_IAM';
        //Allow Identity Pool to invoke RecordingAPI resource
        props.cognitoAuthenticatedRole.attachInlinePolicy(new iam.Policy(this, 'RecordingAPI_StartRecordingResource', {
            statements: [new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ["execute-api:Invoke"],
                    resources: [
                        `arn:aws:execute-api:${this.region}:${this.account}:${recordingAPI.httpApiId}/$default/${startRecording_RouteCfn.routeKey.replace(/\s+/g, '')}`,
                        `arn:aws:execute-api:${this.region}:${this.account}:${recordingAPI.httpApiId}/$default/${stopRecording_RouteCfn.routeKey.replace(/\s+/g, '')}`,
                        `arn:aws:execute-api:${this.region}:${this.account}:${recordingAPI.httpApiId}/$default/${getRecordingSummary_RouteCfn.routeKey.replace(/\s+/g, '')}`
                    ]
                })]
        }));
        this.recordingAPI = recordingAPI;
    }
}
exports.RecordingAPIStack = RecordingAPIStack;
//# sourceMappingURL=data:application/json;base64,